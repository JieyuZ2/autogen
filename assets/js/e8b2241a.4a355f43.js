"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6709],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),g=r,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||l;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},129:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_label:"agent_builder",title:"agentchat.contrib.agent_builder"},i=void 0,o={unversionedId:"reference/agentchat/contrib/agent_builder",id:"reference/agentchat/contrib/agent_builder",isDocsHomePage:!1,title:"agentchat.contrib.agent_builder",description:"AgentBuilder Objects",source:"@site/docs/reference/agentchat/contrib/agent_builder.md",sourceDirName:"reference/agentchat/contrib",slug:"/reference/agentchat/contrib/agent_builder",permalink:"/autogen/docs/reference/agentchat/contrib/agent_builder",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/agentchat/contrib/agent_builder.md",tags:[],version:"current",frontMatter:{sidebar_label:"agent_builder",title:"agentchat.contrib.agent_builder"},sidebar:"referenceSideBar",next:{title:"compressible_agent",permalink:"/autogen/docs/reference/agentchat/contrib/compressible_agent"}},s=[{value:"AgentBuilder Objects",id:"agentbuilder-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"create_agent",id:"create_agent",children:[],level:4},{value:"clear_agent",id:"clear_agent",children:[],level:4},{value:"clear_all_agents",id:"clear_all_agents",children:[],level:4},{value:"save",id:"save",children:[],level:4},{value:"load",id:"load",children:[],level:4},{value:"start",id:"start",children:[],level:4}],level:2}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"agentbuilder-objects"},"AgentBuilder Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class AgentBuilder()\n")),(0,r.kt)("p",null,"Descriptions"),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(host: str = 'localhost',\n             config_path: str = 'OAI_CONFIG_LIST',\n             builder_model: str = 'gpt-4-1106-preview',\n             endpoint_building_timeout: Optional[int] = 180)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"host")," - endpoint host."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config_path")," - path of the OpenAI api configs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"builder_model")," - specify a model as the backbone of build manager."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"endpoint_building_timeout")," - timeout for building up an endpoint server.")),(0,r.kt)("h4",{id:"create_agent"},"create","_","agent"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def create_agent(agent_name: str,\n                 model_name_or_hf_repo: str,\n                 llm_config: dict,\n                 system_message: Optional[str] = autogen.AssistantAgent.\n                 DEFAULT_SYSTEM_MESSAGE,\n                 enable_assistant: Optional[bool] = False,\n                 world_size: Optional[int] = 1) -> autogen.AssistantAgent\n")),(0,r.kt)("p",null,"Create a group chat agent."),(0,r.kt)("p",null,'If the agent rely on an open-source model, this function will automatically set up an endpoint for that agent.\nThe API address of that endpoint will be "localhost:{free port}".'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"agent_name")," - the name that identify the function of the agent (e.g., Coder, Product Manager,...)\nmodel_name_or_hf_repo:"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"llm_config")," - specific configs for LLM (e.g., config_list, seed, temperature, ...)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"system_message")," - system prompt use to format an agent's behavior."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enable_assistant")," - use OpenAI GPTs api instead on self-construct agent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"world_size")," - the max size of parallel tensors (in most of the cases, this is identical to the amount of GPUs).")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"agent")," - a set-up agent.")),(0,r.kt)("h4",{id:"clear_agent"},"clear","_","agent"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def clear_agent(agent_name: str = None, recycle_endpoint: bool = True)\n")),(0,r.kt)("p",null,"Clear a specific agent by name."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"agent_name")," - the name of agent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"recycle_endpoint")," - trigger for recycle the endpoint server. If true, the endpoint will be recycled\nwhen there is no agent depending on.")),(0,r.kt)("h4",{id:"clear_all_agents"},"clear","_","all","_","agents"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def clear_all_agents()\n")),(0,r.kt)("p",null,"Clear all cached agents."),(0,r.kt)("h4",{id:"save"},"save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def save(filepath: Optional[str] = None) -> str\n")),(0,r.kt)("p",null,"Save building configs. If the filepath is not specific, this function will create a filename by encrypt the\nbuilding",(0,r.kt)("em",{parentName:"p"},'task string by md5 with "save_config'),'" prefix, and save config to the local path.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filepath")," - save path.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filepath")," - path save.")),(0,r.kt)("h4",{id:"load"},"load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def load(filepath: str)\n")),(0,r.kt)("p",null,"Load building configs and call the build function to complete building without calling online LLMs' api."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filepath")," - filepath for the save config.")),(0,r.kt)("h4",{id:"start"},"start"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def start(task: str,\n          max_round: Optional[int] = 12,\n          init_messages: Optional[List[dict]] = [])\n")),(0,r.kt)("p",null,"Start a group chat task solving process with built config."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"task")," - description of a task."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_round")," - the maximum number of rounds."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"init_messages")," - input messages before the task start. This can be the chat history from other group chat\nor some preliminary of the task.")))}c.isMDXComponent=!0}}]);